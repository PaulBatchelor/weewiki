#+TITLE: Janet
For all things related to Janet.
* Top Level Files

#+NAME: jan.c
#+BEGIN_SRC c :tangle jan.c
#include <stdlib.h>
#include <stdio.h>
#include <sqlite3.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <time.h>

#include "janet/janet.h"

#include "orgparse.h"
#include "weewiki.h"

#include "jan.h"
<<static_funcdefs>>
<<functions>>
#+END_SRC
#+NAME: jan.h
#+BEGIN_SRC c :tangle jan.h
#ifndef WW_JAN_H
#define WW_JAN_H
<<funcdefs>>
#endif
#+END_SRC
* Janet Print
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_io_print(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_io_print(int32_t argc, Janet *argv)
{
    int32_t j, len;
    int32_t i;
    weewiki_d *ww;
    FILE *f;

    ww = weewiki_get();
    f = weewiki_fp(ww);
    for (i = 0; i < argc; ++i) {
        const uint8_t *vstr = janet_to_string(argv[i]);
        len = janet_string_length(vstr);
        for (j = 0; j < len; ++j) {
            putc(vstr[j], f);
        }
    }
    putc('\n', f);
    return janet_wrap_nil();
}
#+END_SRC
* Parsing Org code in Janet
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_org(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_org(int32_t argc, Janet *argv)
{
    int32_t len;
    weewiki_d *ww;
    weewiki_export_d *ex;
    const char *txt;

    ww = weewiki_get();
    ex = weewiki_ex(ww);
    txt = (const char *)janet_to_string(argv[0]);
    len = strlen(txt);
    weewiki_export_run(ex, txt, len);
    return janet_wrap_nil();
}
#+END_SRC
* Janet
** Setup
#+NAME: funcdefs
#+BEGIN_SRC c
JanetTable * weewiki_janet_setup(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
JanetTable * weewiki_janet_setup(void)
{
    JanetTable *env;
    janet_init();
    env = janet_core_env(NULL);
    weewiki_janet_cfuns(env);
    return env;
}
#+END_SRC
** Load C Functions
All the custom C functions for janet are loaded here.
This is called in setup, but is also called separately
for the janet standalone in =janet_main=.
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_cfuns(JanetTable *env);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void weewiki_janet_cfuns(JanetTable *env)
{
    janet_def(env,
                "print",
                janet_wrap_cfunction(cfun_io_print),
                NULL);
    janet_def(env,
                "org",
                janet_wrap_cfunction(cfun_org),
                NULL);
    janet_dostring(env,
                    "(defn html-header () ())"
                    "(defn html-footer () ())"
                    "(def ww-dir \"\")",
                    NULL, NULL);

}
#+END_SRC
** Cleanup
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_cleanup(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void weewiki_janet_cleanup(void)
{
    janet_deinit();
}
#+END_SRC
** Load Config
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_loadconfig(JanetTable *env);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void weewiki_janet_loadconfig(JanetTable *env)
{
    FILE *config;
    size_t config_sz;
    char *tmp;

    config = fopen("weewiki.janet", "r");

    if (config != NULL) {
        fseek(config, 0, SEEK_END);
        config_sz = ftell(config);
        tmp = calloc(1, config_sz + 1);
        fseek(config, 0, SEEK_SET);
        fread(tmp, 1, config_sz, config);
        fclose(config);
        janet_dostring(env, tmp, NULL, NULL);
        free(tmp);
    }
}
#+END_SRC
** Get www-dir
#+NAME: funcdefs
#+BEGIN_SRC c
const unsigned char * weewiki_janet_wwdir(JanetTable *env);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
const unsigned char * weewiki_janet_wwdir(JanetTable *env)
{
    const unsigned char *dir;
    Janet out;

    dir = NULL;
    janet_dostring(env, "ww-dir", NULL, &out);
    dir = janet_unwrap_string(out);
    return dir;
}
#+END_SRC
