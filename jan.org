#+TITLE: Janet
* Overview
This document is in charge of handling integration between
Janet and Weewiki. This consists of two main things: adding
weewiki functions to Janet, and handling inline janet code
in weewiki documents.
* Top Level Files

#+NAME: jan.c
#+BEGIN_SRC c :tangle jan.c
#include <stdlib.h>
#include <stdio.h>
#include <sqlite3.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <time.h>

#include "janet/janet.h"

#include "orgparse.h"
#include "weewiki.h"
#include "zet.h"

#include "jan.h"
<<static_funcdefs>>
<<functions>>
#+END_SRC
#+NAME: jan.h
#+BEGIN_SRC c :tangle jan.h
#ifndef WW_JAN_H
#define WW_JAN_H
<<funcdefs>>
#endif
#+END_SRC
* Janet Print + Prin
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_io_print(int32_t argc, Janet *argv);
static Janet cfun_io_prin(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_io_print(int32_t argc, Janet *argv)
{
    int32_t len;
    int32_t i;
    weewiki_d *ww;

    ww = weewiki_get();
    for (i = 0; i < argc; ++i) {
        const uint8_t *vstr = janet_to_string(argv[i]);
        len = janet_string_length(vstr);
        weewiki_print(ww, (const char *)vstr, len);
    }
    weewiki_print(ww, "\n", 1);
    return janet_wrap_nil();
}

static Janet cfun_io_prin(int32_t argc, Janet *argv)
{
    int32_t len;
    int32_t i;
    weewiki_d *ww;

    ww = weewiki_get();
    for (i = 0; i < argc; ++i) {
        const uint8_t *vstr = janet_to_string(argv[i]);
        len = janet_string_length(vstr);
        weewiki_print(ww, (const char *)vstr, len);
    }
    return janet_wrap_nil();
}
#+END_SRC
* Parsing Org code in Janet
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_org(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_org(int32_t argc, Janet *argv)
{
    int32_t len;
    weewiki_d *ww;
    const char *txt;
    ww = weewiki_get();
    txt = (const char *)janet_to_string(argv[0]);
    len = strlen(txt);
    weewiki_janet_org(ww, txt, len);
    return janet_wrap_nil();
}
#+END_SRC
* Load Janet config internally
When the server is served from a file, the main config
file is loaded from the SQLite database rather than
from the file. It will attempt to look for the config
file under the keyword =@config=.
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_loadconfig_internal(JanetTable *env,
                                       weewiki_d *ww);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void weewiki_janet_loadconfig_internal(JanetTable *env,
                                       weewiki_d *ww)
{
    sqlite3 *db;
    sqlite3_stmt *stmt;
    int rc;

    db = weewiki_db(ww);
    sqlite3_prepare_v2(db,
                       "SELECT value FROM wiki WHERE(key==?1);",
                       -1,
                       &stmt,
                       NULL);
    sqlite3_bind_text(stmt, 1, "@config", -1, NULL);

    rc = sqlite3_step(stmt);

    if (rc == SQLITE_ROW) {
        janet_dostring(env,
                       (const char *)sqlite3_column_text(stmt, 0),
                       NULL, NULL);
    }

    sqlite3_finalize(stmt);
}
#+END_SRC
* Janet
** Setup
#+NAME: funcdefs
#+BEGIN_SRC c
JanetTable * weewiki_janet_setup(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
JanetTable * weewiki_janet_setup(void)
{
    JanetTable *env;
    janet_init();
    env = janet_core_env(NULL);
    weewiki_janet_cfuns(env);
    return env;
}
#+END_SRC
** Load C Functions
All the custom C functions for janet are loaded here.
This is called in setup, but is also called separately
for the janet standalone in =janet_main=.
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_cfuns(JanetTable *env);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
<<janet_funcs>>
void weewiki_janet_sqlite(JanetTable *env);
void weewiki_janet_btprnt(JanetTable *env);
void weewiki_janet_cfuns(JanetTable *env)
{
    janet_def(env,
              "print",
              janet_wrap_cfunction(cfun_io_print),
              NULL);
    janet_def(env,
              "prin",
              janet_wrap_cfunction(cfun_io_prin),
              NULL);
    janet_def(env,
              "org",
              janet_wrap_cfunction(cfun_org),
              NULL);
    janet_def(env,
              "ww-open",
              janet_wrap_cfunction(cfun_ww_open),
              NULL);
    janet_def(env,
              "ww-close",
              janet_wrap_cfunction(cfun_ww_close),
              NULL);
    janet_def(env,
              "ww-add-page",
              janet_wrap_cfunction(cfun_ww_add_page),
              NULL);
    janet_def(env,
              "ww-del-page",
              janet_wrap_cfunction(cfun_ww_del_page),
              NULL);
    janet_def(env,
              "ww-add-link",
              janet_wrap_cfunction(cfun_ww_add_link),
              NULL);
    janet_def(env,
              "ww-sync",
              janet_wrap_cfunction(cfun_ww_sync),
              NULL);
    janet_def(env,
              "ww-clear",
              janet_wrap_cfunction(cfun_ww_clear),
              NULL);
    janet_def(env,
              "ww-db",
              janet_wrap_cfunction(cfun_ww_db),
              NULL);
    janet_def(env,
              "ww-name",
              janet_wrap_cfunction(cfun_name),
              NULL);
    <<janet_defs>>
    weewiki_janet_sqlite(env);
    weewiki_janet_btprnt(env);
    janet_dostring(env,
                    "(defn html-header () ())"
                    "(defn html-footer () ())"
                    "(def ww-dir \"\")",
                    NULL, NULL);

}
#+END_SRC
** Cleanup
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_cleanup(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void weewiki_janet_cleanup(void)
{
    janet_deinit();
}
#+END_SRC
** Load Config
#+NAME: funcdefs
#+BEGIN_SRC c
void weewiki_janet_loadconfig(JanetTable *env);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void weewiki_janet_loadconfig(JanetTable *env)
{
    FILE *config;
    size_t config_sz;
    char *tmp;

    config = fopen("weewiki.janet", "r");

    if (config != NULL) {
        fseek(config, 0, SEEK_END);
        config_sz = ftell(config);
        tmp = calloc(1, config_sz + 1);
        fseek(config, 0, SEEK_SET);
        fread(tmp, 1, config_sz, config);
        fclose(config);
        janet_dostring(env, tmp, NULL, NULL);
        free(tmp);
    }
}
#+END_SRC
** Get www-dir
#+NAME: funcdefs
#+BEGIN_SRC c
const unsigned char * weewiki_janet_wwdir(JanetTable *env);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
const unsigned char * weewiki_janet_wwdir(JanetTable *env)
{
    const unsigned char *dir;
    Janet out;

    dir = NULL;
    janet_dostring(env, "ww-dir", NULL, &out);
    dir = janet_unwrap_string(out);
    return dir;
}
#+END_SRC
** Open/Close database
Should only be used in the janet standalone.

#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_open(int32_t argc, Janet *argv);
static Janet cfun_ww_close(int32_t argc, Janet *argv);
#+END_SRC

Note: this used to use =weewiki_open=, but has been changed
to use =weewiki_create=. The latter function will open and
initialize a new database (which is what the former used
to do).

#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_ww_open(int32_t argc, Janet *argv)
{
    const uint8_t *filename;
    weewiki_d *ww;
    janet_fixarity(argc, 1);

    filename = janet_getstring(argv, 0);
    ww = weewiki_get();

    weewiki_create(ww, (const char *)filename);
    return janet_wrap_nil();
}

static Janet cfun_ww_close(int32_t argc, Janet *argv)
{
    weewiki_d *ww;
    ww = weewiki_get();
    weewiki_close(ww);
    return janet_wrap_nil();
}
#+END_SRC
** Add Page
Adds a page to the database.
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_add_page(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_ww_add_page(int32_t argc, Janet *argv)
{
    const char *key;
    const char *val;
    weewiki_d *ww;

    janet_fixarity(argc, 2);
    key = (const char *)janet_getstring(argv, 0);
    val = (const char *)janet_getstring(argv, 1);
    ww = weewiki_get();

    weewiki_add_page(ww, key, val);

    return janet_wrap_nil();
}
#+END_SRC
** Delete Page
Deletes a Page from the database.

#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_del_page(int32_t argc, Janet *argv);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_ww_del_page(int32_t argc, Janet *argv)
{
    const char *key;
    weewiki_d *ww;

    janet_fixarity(argc, 1);
    key = (const char *)janet_getstring(argv, 0);
    ww = weewiki_get();

    weewiki_del_page(ww, key);

    return janet_wrap_nil();
}
#+END_SRC
** Add Link
Adds a link to the note. Note that the mtime will be set to
zero, so that the page is automatically pushed by default.
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_add_link(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_ww_add_link(int32_t argc, Janet *argv)
{
    const char *key;
    const char *fname;
    weewiki_d *ww;

    janet_fixarity(argc, 2);
    key = (const char *)janet_getstring(argv, 0);
    fname = (const char *)janet_getstring(argv, 1);
    ww = weewiki_get();

    weewiki_add_link(ww, key, fname);
    return janet_wrap_nil();
}
#+END_SRC
** Sync Database
Equivalent to =weewiki sync=.
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_sync(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_ww_sync(int32_t argc, Janet *argv)
{
    weewiki_d *ww;
    ww = weewiki_get();
    weewiki_sync(ww);
    return janet_wrap_nil();
}
#+END_SRC
** Clear Database
Clears data from existing wiki db.
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_clear(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_ww_clear(int32_t argc, Janet *argv)
{
    weewiki_d *ww;
    ww = weewiki_get();
    weewiki_clear(ww);
    return janet_wrap_nil();
}
#+END_SRC
** Get Open Database
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_ww_db(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
Janet weewiki_return_db(sqlite3 *sql);
static Janet cfun_ww_db(int32_t argc, Janet *argv)
{
    weewiki_d *ww;
    ww = weewiki_get();
    return weewiki_return_db(weewiki_db(ww));
}
#+END_SRC
** Getting current page name
#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_name(int32_t argc, Janet *argv);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_name(int32_t argc, Janet *argv)
{
    weewiki_d *ww;
    const char *name;
    Janet out;
    ww = weewiki_get();

    name = weewiki_pgname(ww);

    out = janet_wrap_nil();

    if (name !=NULL) {
        out = janet_wrap_string(janet_string((const unsigned char *)name, strlen(name)));
    }

    return out;
}
#+END_SRC
** Is weewiki in server mode?
Done with the janet function =ww-server?=

#+NAME: janet_defs
#+BEGIN_SRC c
janet_def(env,
          "ww-server?",
          janet_wrap_cfunction(cfun_is_server),
          NULL);
#+END_SRC

#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_is_server(int32_t argc, Janet *argv);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_is_server(int32_t argc, Janet *argv)
{
    weewiki_d *ww;
    ww = weewiki_get();

    return janet_wrap_boolean(weewiki_is_server(ww));
}
#+END_SRC
** DB name set/get
Wrappers to set/get the current database name.

#+NAME: static_funcdefs
#+BEGIN_SRC c
static Janet cfun_dbname_set(int32_t argc, Janet *argv);
static Janet cfun_dbname_get(int32_t argc, Janet *argv);
#+END_SRC

#+NAME: janet_defs
#+BEGIN_SRC c
janet_def(env,
          "ww-dbname-set",
          janet_wrap_cfunction(cfun_dbname_set),
          NULL);
janet_def(env,
          "ww-dbname-get",
          janet_wrap_cfunction(cfun_dbname_get),
          NULL);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static Janet cfun_dbname_set(int32_t argc, Janet *argv)
{
    const char *str;
    janet_fixarity(argc, 1);
    str = (const char *)janet_getstring(argv, 0);
    weewiki_dbname_set(str);
    return janet_wrap_nil();
}

static Janet cfun_dbname_get(int32_t argc, Janet *argv)
{
    janet_fixarity(argc, 0);
    return janet_wrap_string(weewiki_dbname_get());
}
#+END_SRC
** Zet Resolve
=ww-zet-resolve= is a function that resolves a UUID.
If no ID is found, an error is thrown.

#+NAME: janet_defs
#+BEGIN_SRC c
janet_def(env,
          "ww-zet-resolve",
          janet_wrap_cfunction(cfun_zet_resolve),
          NULL);
#+END_SRC

#+NAME: janet_funcs
#+BEGIN_SRC c
static Janet cfun_zet_resolve(int32_t argc, Janet *argv)
{
    const char *str;
    weewiki_d *ww;
    wwzet_uuid uuid;
    int rc;


    janet_fixarity(argc, 1);
    str = (const char *)janet_getstring(argv, 0);
    weewiki_dbname_set(str);
    ww = weewiki_get();

    rc = wwzet_uuid_resolve(ww, str, strlen(str), &uuid);

    if (rc) {
        janet_panicf("Could not resolve %s\n", str);
    }

    return janet_wrap_string(janet_string((const unsigned char *)uuid.str, 36));
}
#+END_SRC
** UUID Generator
Bindings to the internal uuidv4 generator used by
weewiki.

#+NAME: janet_defs
#+BEGIN_SRC c
janet_def(env,
          "ww-zet-uuid-init",
          janet_wrap_cfunction(cfun_zet_uuid_init),
          NULL);
janet_def(env,
          "ww-zet-uuid-gen",
          janet_wrap_cfunction(cfun_zet_uuid_gen),
          NULL);
#+END_SRC

#+NAME: janet_funcs
#+BEGIN_SRC c
static Janet cfun_zet_uuid_gen(int32_t argc, Janet *argv)
{
    wwzet_uuid uuid;

    janet_fixarity(argc, 0);

    wwzet_uuid_init(&uuid);
    wwzet_uuid_generate(&uuid);

    return janet_wrap_string(janet_string((const unsigned char *)uuid.str, 36));
}
#+END_SRC

#+NAME: janet_funcs
#+BEGIN_SRC c
static Janet cfun_zet_uuid_init(int32_t argc, Janet *argv)
{
    wwzet_uuid_rng_init();
    return janet_wrap_nil();
}
#+END_SRC

