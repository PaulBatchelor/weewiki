#+TITLE: WeeWiki Server
A work in progress. Rambles for now. No code.

This document aims to implement a local http server around
weewiki. Instead of statically generating HTML,
pages are dynamically generated.

The single-header =httpserver.h= program by jeremycw will be
http server implementation.
* Top Files
The top level files are contained the the files
=wwserver.c= and =wwserver.h=.
* Top Level Function (weewiki_server)
The top-level function for this is =weewiki_server=. Since
this is a command line program, it takes in =argc= and
=argv= as arguments.

=weewiki server= will run the server with all the default
values. It will read the default a.db and weewiki.janet
configuration file.
* Global Data
This is stuff that gets instantiated at startup.
For now, this is probably just the database, though
this could change.
** Startup
Database is opened. For now, just "a.db".
** Cleanup
Database is closed. May need to figure out how to cleanly
break out of loop.
* Handle Request Callback
The http server library has a single callback entry point.

The handle request callback can be divided up into the
following steps:

- URL parsing
- Writing to buffer
- Pushing buffer to HTTP body
* URL Parser
First thing the requester does is parse the URL, this
determines what to do.

Right now, the only thing the server is programmed to do
is parse org pages to HTML and display. Pages start with
the URL =/wiki=. For example, the URL =/wiki/foo= would
display the page =foo=.

If it matches, the URL parser will extract the wiki page
name and attempt to retrieve it from the database.
* Page Lookup
Page lookup is done via a SQLite query on the database
currently opened. Probably something like:

"SELECT value FROM wiki WHERE(key==?1);"

If the key doesn't exist, clean-up and return an error.

Otherwise, the string value is extracted from the the column
along with the size.
* Parsing
Once the string is retrieved from the database, it is parsed
via org-parse and converted to HTML. Org parse is
provisioned with the proper HTML callbacks that write
to a buffer.
* HTML buffer callbacks
Instead of writing to a file, HTML is written to a buffer.
This buffer is allocated/freed inside the request callback,
and then bound to the org parser data.

New callbacks will be required for the orgparse routine,
which will be defined below.
* Writing the buffer
The parsed HTML in the buffer is set to be the body of the
http request.

The status + header is set, and the the http server responds
with =http_respond=.
* wiki page request cleanup
After the request is sent, there is cleanup. The buffer
is freed, and the SQLite statement is finalized via
=sqlite3_finalize=.
* Buffer Management
All content must be written to in-memory location.
This is handled in a very simple way via a buffer type
called =wws_buffer=.

A =wws_buffer= struct contains the buffer itself (an
unsigned char array), the current position of the buffer
(which is therefore the current size), and the
total size.

The =wws_buffer= is allocated with the function
=wws_buffer_alloc=. Choose a largish size because this
is the maximum HTML size for a page. Re-allocation could
come later, but for this proof-of concept, a fixed
size is simple and good enough.

A allocated buffer must be freed with =wws_buffer_free=.

Write to the buffer using =wws_buffer_write=.
