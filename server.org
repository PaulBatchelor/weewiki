#+TITLE: WeeWiki Server
A work in progress. Rambles for now. No code.

This document aims to implement a local http server around
weewiki. Instead of statically generating HTML,
pages are dynamically generated.

The single-header =httpserver.h= program by jeremycw will be
http server implementation.
* Top Files
The top level files are contained the the files
=server.c= and =server.h=.
#+NAME: server.h
#+BEGIN_SRC c :tangle server.h
#ifndef WWSERVER_H
#define WWSERVER_H
<<typedefs>>
<<funcdefs>>
#endif
#+END_SRC
#+NAME: server.c
#+BEGIN_SRC c :tangle server.c
#include <stdio.h>
#include <sqlite3.h>
#define HTTPSERVER_IMPL
#include "httpserver.h/httpserver.h"
#include "server.h"
<<structs>>
<<global_data>>
<<static_funcdefs>>
<<functions>>
#+END_SRC
* TODO Top Level Function (weewiki_server)
The top-level function for this is =weewiki_server=. Since
this is a command line program, it takes in =argc= and
=argv= as arguments.

=weewiki server= will run the server with all the default
values. It will read the default a.db and weewiki.janet
configuration file. This will be the only thing implemented
for now.

Later, the hope is to be able to pass in a weewiki database
and have everything be served via that file (including
an embedded config file).
#+NAME: funcdefs
#+BEGIN_SRC c
int weewiki_server(int argc, char *argv[]);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static int running = 1;

static void quit (int sig)
{
    running = 0;
    printf("Signal Interrupt\n");
}

int weewiki_server(int argc, char *argv[])
{
    /* TODO: implement */
    wwserver_d wws;
    wwserver_init(&wws, "a.db");
    wwserver_global_set(&wws);
    printf("This is not yet implemented.\n");
    if (wws.server != NULL) {
        signal(SIGINT, quit);
        http_server_listen_poll(wws.server);
        while (running) {
            http_server_poll(wws.server);
        }
    }
    wwserver_clean(&wws);
    return 1;
}
#+END_SRC
* TODO Main Data
This is stuff that gets instantiated at startup.
For now, this is probably just the database, though
this could change.
** TODO Struct
#+NAME: typedefs
#+BEGIN_SRC c
typedef struct wwserver_d wwserver_d;
#+END_SRC
Database + http server.
#+NAME: structs
#+BEGIN_SRC c
struct wwserver_d {
    sqlite3 *db;
    struct http_server_s *server;
};
#+END_SRC
** TODO global data setters/getters
#+NAME: global_data
#+BEGIN_SRC c
static wwserver_d *WWS = NULL;
#+END_SRC
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void wwserver_global_set(wwserver_d *p);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void wwserver_global_set(wwserver_d *p)
{
    WWS = p;
}
#+END_SRC
#+NAME: static_funcdefs
#+BEGIN_SRC c
static wwserver_d * wwserver_global_get(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static wwserver_d * wwserver_global_get(void)
{
    return WWS;
}
#+END_SRC
** TODO Startup
#+NAME: funcdefs
#+BEGIN_SRC c
int wwserver_init(wwserver_d *wws, const char *filename);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
int wwserver_init(wwserver_d *wws, const char *filename)
{
    /* TODO: implement */
    wws->db = NULL;
    wws->server = http_server_init(8080, handle_request);
    return 1;
}
#+END_SRC
** TODO Cleanup
Database is closed. May need to figure out how to cleanly
break out of loop.
#+NAME: funcdefs
#+BEGIN_SRC c
void wwserver_clean(wwserver_d *wws);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void wwserver_clean(wwserver_d *wws)
{
    /* TODO: implement */
    if (wws->server != NULL) {
        free(wws->server);
    }
}
#+END_SRC
* TODO Handle Request Callback
The http server library has a single callback entry point.

The handle request callback can be divided up into the
following steps:

- URL parsing
- Writing to buffer
- Pushing buffer to HTTP body
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void handle_request(struct http_request_s* request);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void handle_request(struct http_request_s* request)
{
    /* TODO: implement */
    wwserver_d *wws;
    struct http_string_s target;
    char *name;
    int len;
    wws = wwserver_global_get();
    target = http_request_target(request);

    if (wws == NULL) return;

    /* TODO: parse URL */

    len = 0;
    name = NULL;

    if (is_wiki(&target, &name, &len)) {
        /* TODO: get page */
        /* TODO: set up parser */
        /* TODO: write to buffer */
        /* TODO: write http request */
    } else {
        /* TODO: 404 not found */
    }


}
#+END_SRC
* TODO URL Parser
First thing the requester does is parse the URL, this
determines what to do.

Right now, the only thing the server is programmed to do
is parse org pages to HTML and display. Pages start with
the URL =/wiki=. For example, the URL =/wiki/foo= would
display the page =foo=.

The wiki page is parsed with the function =is_wiki=. If
true, the output will return the name + length.

#+NAME: static_funcdefs
#+BEGIN_SRC c
static int is_wiki(struct http_string_s *target,
                   char **name,
                   int *len);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static int is_wiki(struct http_string_s *target,
                   char **name,
                   int *len)
{
    /* TODO: implement */
    return 0;
}
#+END_SRC

If it matches, the URL parser will extract the wiki page
name and attempt to retrieve it from the database.
* TODO Page Lookup
Page lookup is done via a SQLite query on the database
currently opened. Probably something like:

"SELECT value FROM wiki WHERE(key==?1);"

If the key doesn't exist, clean-up and return an error.

Otherwise, the string value is extracted from the the column
along with the size.
* TODO Parsing
Once the string is retrieved from the database, it is parsed
via org-parse and converted to HTML. Org parse is
provisioned with the proper HTML callbacks that write
to a buffer.
* TODO HTML buffer callbacks
Instead of writing to a file, HTML is written to a buffer.
This buffer is allocated/freed inside the request callback,
and then bound to the org parser data.

New callbacks will be required for the orgparse routine,
which will be defined below.
* TODO Writing the http request
The parsed HTML in the buffer is set to be the body of the
http request.

The status + header is set, and the the http server responds
with =http_respond=.
* TODO wiki page request cleanup
After the request is sent, there is cleanup. The buffer
is freed, and the SQLite statement is finalized via
=sqlite3_finalize=.
* TODO Buffer Management
All content must be written to in-memory location.
This is handled in a very simple way via a buffer type
called =wws_buffer=.

A =wws_buffer= struct contains the buffer itself (an
unsigned char array), the current position of the buffer
(which is therefore the current size), and the
total size.

The =wws_buffer= is allocated with the function
=wws_buffer_alloc=. Choose a largish size because this
is the maximum HTML size for a page. Re-allocation could
come later, but for this proof-of concept, a fixed
size is simple and good enough.

A allocated buffer must be freed with =wws_buffer_free=.

Write to the buffer using =wws_buffer_write=.
