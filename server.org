#+TODO: TODO(t) WIP(w@/!) | DONE(d!)
#+TITLE: WeeWiki Server
A work in progress. Rambles for now. No code.

This document aims to implement a local http server around
weewiki. Instead of statically generating HTML,
pages are dynamically generated.

The single-header =httpserver.h= program by jeremycw will be
http server implementation.
* Top Files
The top level files are contained the the files
=server.c= and =server.h=.
#+NAME: server.h
#+BEGIN_SRC c :tangle server.h
#ifndef WWSERVER_H
#define WWSERVER_H
<<typedefs>>
<<funcdefs>>
#endif
#+END_SRC
#+NAME: server.c
#+BEGIN_SRC c :tangle server.c
#include <stdio.h>
#include <sqlite3.h>
#define HTTPSERVER_IMPL
#include "httpserver.h/httpserver.h"
#include "orgparse.h"
#include "weewiki.h"
#include "server.h"
#include "jan.h"
<<structs>>
<<global_data>>
<<static_funcdefs>>
<<functions>>
#+END_SRC
* DONE Top Level Function (weewiki_server)
CLOSED: [2020-01-12 Sun 17:27]
The top-level function for this is =weewiki_server=. Since
this is a command line program, it takes in =argc= and
=argv= as arguments.

=weewiki server= will run the server with all the default
values. It will read the default a.db and weewiki.janet
configuration file. This will be the only thing implemented
for now.

Later, the hope is to be able to pass in a weewiki database
and have everything be served via that file (including
an embedded config file).
#+NAME: funcdefs
#+BEGIN_SRC c
int weewiki_server(weewiki_d *ww, int argc, char *argv[]);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static int running = 1;

static void quit (int sig)
{
    running = 0;
    printf("Signal Interrupt\n");
}

int weewiki_server(weewiki_d *ww, int argc, char *argv[])
{
    wwserver_d wws;
    wws.ww = ww;
    weewiki_init(ww);
    weewiki_set(ww);
    weewiki_parse_set(ww, parse_org);
    weewiki_print_set(ww, printer);
    weewiki_ud_set(ww, NULL);
    weewiki_open(ww, "a.db");
    wwserver_init(&wws, 8080);
    wwserver_global_set(&wws);
    printf("Warning: this is not yet fully implemented.\n");
    if (wws.server != NULL) {
        signal(SIGINT, quit);
        http_server_listen_poll(wws.server);
        while (running) {
            http_server_poll(wws.server);
        }
    }
    wwserver_clean(&wws);
    weewiki_close(ww);
    weewiki_clean(ww);
    return 1;
}
#+END_SRC
* WIP Main Data
- State "WIP"        from "TODO"       [2020-01-14 Tue 15:17]
This is stuff that gets instantiated at startup.
For now, this is probably just the database, though
this could change.
** WIP Struct
- State "WIP"        from "TODO"       [2020-01-14 Tue 15:17]
#+NAME: typedefs
#+BEGIN_SRC c
typedef struct wwserver_d wwserver_d;
#+END_SRC
Database + http server.
#+NAME: structs
#+BEGIN_SRC c
struct wwserver_d {
    struct http_server_s *server;
    weewiki_d *ww;
    JanetTable *env;
};
#+END_SRC
** WIP global data setters/getters
- State "WIP"        from "TODO"       [2020-01-12 Sun 17:29]
#+NAME: global_data
#+BEGIN_SRC c
static wwserver_d *WWS = NULL;
#+END_SRC
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void wwserver_global_set(wwserver_d *p);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void wwserver_global_set(wwserver_d *p)
{
    WWS = p;
}
#+END_SRC
#+NAME: static_funcdefs
#+BEGIN_SRC c
static wwserver_d * wwserver_global_get(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static wwserver_d * wwserver_global_get(void)
{
    return WWS;
}
#+END_SRC
** WIP Startup
- State "WIP"        from "TODO"       [2020-01-12 Sun 17:29]
#+NAME: funcdefs
#+BEGIN_SRC c
int wwserver_init(wwserver_d *wws, int port);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
int wwserver_init(wwserver_d *wws, int port)
{
    wws->server = http_server_init(port, handle_request);
    wws->env = weewiki_janet_setup();
    weewiki_janet_loadconfig(wws->env);
    return 1;
}
#+END_SRC
** WIP Cleanup
- State "WIP"        from "TODO"       [2020-01-12 Sun 17:30]
Database is closed. May need to figure out how to cleanly
break out of loop.
#+NAME: funcdefs
#+BEGIN_SRC c
void wwserver_clean(wwserver_d *wws);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void wwserver_clean(wwserver_d *wws)
{
    if (wws->server != NULL) {
        free(wws->server);
    }
    weewiki_janet_cleanup();
    /* weewiki data gets cleaned elsewhere */
}
#+END_SRC
* WIP Handle Request Callback
- State "WIP"        from "TODO"       [2020-01-12 Sun 17:34]
The http server library has a single callback entry point.

The handle request callback can be divided up into the
following steps:

- URL parsing
- Writing to buffer
- Pushing buffer to HTTP body
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void handle_request(struct http_request_s* request);
#+END_SRC

This is the struct passed to the org parser.
It will go somewhere else eventually, but
it was first conceived here.

#+NAME: structs
#+BEGIN_SRC c
typedef struct {
    orgparse *op;
    orgparse_state *state;
    wws_buffer *buf;
    wwserver_d *wws;
} wws_parser_d;
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
#define RESPONSE "What is my purpose?"
static void handle_request(struct http_request_s* request)
{
    /* TODO: implement */
    wwserver_d *wws;
    struct http_string_s target;
    const char *name;
    int len;
    wws = wwserver_global_get();
    target = http_request_target(request);

    printf("Request: ");
    fwrite(target.buf, 1, target.len, stdout);
    printf("\n");
    fflush(stdout);

    if (wws == NULL) return;

    len = 0;

    if (is_wiki(&target, &name, &len)) {
        wws_buffer buf;
        sqlite3 *db;
        sqlite3_stmt *stmt;
        int rc;

        struct http_response_s* response = http_response_init();
        wws_buffer_alloc(&buf, 2048);

        db = weewiki_db(wws->ww);
        sqlite3_prepare_v2(db,
                        "SELECT value FROM wiki WHERE(key==?1);",
                        -1,
                        &stmt,
                        NULL);
        sqlite3_bind_text(stmt, 1, name, len, NULL);
        rc = sqlite3_step(stmt);

        if (rc != SQLITE_ROW) {
            wws_buffer_write(&buf, "Could not find page: ", 21);
            wws_buffer_write(&buf, name, len);
            http_response_status(response, 404);
            http_response_header(response, "Content-Type", "text/plain");
        } else {
            orgparse *op;
            orgparse_state *state;
            wws_parser_d pd;

            op = calloc(1, orgparse_size());
            state = calloc(1, orgparse_state_size());
            pd.op = op;
            pd.state = state;
            pd.buf = &buf;
            pd.wws = wws;
            wws_orgparse_setup(op);
            http_response_header(response, "Content-Type", "text/html");
            http_response_status(response, 200);
            weewiki_ud_set(wws->ww, &pd);
            /* wws_buffer_write(&buf, */
            /*                  sqlite3_column_text(stmt, 0), */
            /*                  sqlite3_column_bytes(stmt, 0)); */

            janet_dostring(wws->env,
                        (const unsigned char *)"(html-header)",
                        NULL, NULL);
            orgparse_init_and_run(op,
                                  (const char *)sqlite3_column_text(stmt, 0),
                                  sqlite3_column_bytes(stmt, 0),
                                  &pd,
                                  state);
            orgparse_end(op, &pd, state);
            janet_dostring(wws->env,
                        (const unsigned char *)"(html-footer)",
                        NULL, NULL);

            weewiki_ud_set(wws->ww, NULL);
            free(op);
            free(state);
        }


        http_response_body(response, (const char *)buf.buf, buf.pos);
        http_respond(request, response);
        /* TODO: get page */
        /* TODO: set up parser */
        /* TODO: write to buffer */
        /* TODO: write http request */
        wws_buffer_free(&buf);
        sqlite3_finalize(stmt);
    } else {
        struct http_response_s* response = http_response_init();
        http_response_status(response, 404);
        http_response_header(response, "Content-Type", "text/plain");
        http_response_body(response, RESPONSE, sizeof(RESPONSE) - 1);
        http_respond(request, response);
    }
}
#+END_SRC
* DONE URL Parser
CLOSED: [2020-01-14 Tue 10:30]
- State "DONE"       from "WIP"        [2020-01-14 Tue 10:30]
- State "WIP"        from "TODO"       [2020-01-14 Tue 10:18]
First thing the requester does is parse the URL, this
determines what to do.

Right now, the only thing the server is programmed to do
is parse org pages to HTML and display. Pages start with
the URL =/wiki=. For example, the URL =/wiki/foo= would
display the page =foo=.

The wiki page is parsed with the function =is_wiki=. If
true, the output will return the name + length.

#+NAME: static_funcdefs
#+BEGIN_SRC c
static int is_wiki(struct http_string_s *target,
                   const char **name,
                   int *len);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static int is_wiki(struct http_string_s *target,
                   const char **name,
                   int *len)
{
    const char *buf;
    int size;
    int pos;

    *len = 0;

    buf = target->buf;
    size = target->len;

    if (size < 7) return 0; /* minimum: /wiki/N */

    pos = 1; /* skip first whack */

    /* for some reason, "wiki/" must be first */
    if (strncmp("wiki/", &buf[pos], 5)) return 0;

    pos += 5;

    *name = &buf[pos];
    *len = size - pos;

    return 1;
}
#+END_SRC

If it matches, the URL parser will extract the wiki page
name and attempt to retrieve it from the database.
* WIP HTML buffer callbacks
- State "WIP"        from "TODO"       [2020-01-14 Tue 14:55]
Instead of writing to a file, HTML is written to a buffer.
This buffer is allocated/freed inside the request callback,
and then bound to the org parser data.

New callbacks will be required for the orgparse routine,
which will be defined below.

This is for now just copy-pasted from the weewiki codebase,
with the bits commented out.
#+NAME: funcdefs
#+BEGIN_SRC c
void wws_orgparse_setup(orgparse *op);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
<<orgparse_callbacks>>
void wws_orgparse_setup(orgparse *op)
{
    orgparse_init(op);
    <<orgparse_html_setup>>
}
#+END_SRC
** Header
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_header(void *ud,
                        const char *h,
                        size_t sz,
                        int lvl)
{
    wws_parser_d *p;
    char tmp[16];
    int tmp_sz;
    p = ud;
    tmp_sz = sprintf(tmp, "\n<h%d>", lvl);
    wws_buffer_write(p->buf, tmp, tmp_sz);
    wws_buffer_write(p->buf, h, sz);
    tmp_sz = sprintf(tmp, "</h%d>", lvl);
    wws_buffer_write(p->buf, tmp, tmp_sz);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_header(op, html_header);
#+END_SRC
** Text
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_text(void *ud,
                      const char *str,
                      size_t sz)
{
    wws_parser_d *p;
    p = ud;
    wws_buffer_write(p->buf, str, sz);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_text(op, html_text);
#+END_SRC
** Bold
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_bold(void *ud,
                      const char *str,
                      size_t sz)
{
    /* weewiki_export_d *ex; */
    /* FILE *fp; */
    /* ex = ud; */
    /* fp = ex->fp; */
    /* fprintf(fp, "<b>"); */
    /* fwrite(str, 1, sz, fp); */
    /* fprintf(fp, "</b>"); */
    wws_parser_d *p;
    p = ud;
    wws_buffer_write(p->buf, "<b>", 3);
    wws_buffer_write(p->buf, str, sz);
    wws_buffer_write(p->buf, "</b>", 4);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_bold(op, html_bold);
#+END_SRC
** DONE Aux
CLOSED: [2020-01-15 Wed 15:40]
- State "DONE"       from "TODO"       [2020-01-15 Wed 15:40]
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_aux(void *ud,
                     const char *str,
                     size_t sz)
{
    wws_parser_d *p;
    p = ud;
    janet_dobytes(p->wws->env,
                  (const uint8_t *)str, sz,
                  NULL, NULL);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_aux(op, html_aux);
#+END_SRC
** Newline
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_newline(void *ud,
                         const char *str,
                         size_t sz)
{
    wws_parser_d *p;
    p = ud;
    wws_buffer_write(p->buf, "<br>\n", 6);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_newline(op, html_newline);
#+END_SRC
** Code
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_code(void *ud,
                      const char *str,
                      size_t sz)
{
    wws_parser_d *p;
    p = ud;
    wws_buffer_write(p->buf, "<code>", 6);
    wws_buffer_write(p->buf, str, sz);
    wws_buffer_write(p->buf, "</code>", 7);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_code(op, html_code);
#+END_SRC
** TODO Code Block
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_codeblock(void *ud,
                           const char *str,
                           size_t sz)
{
    /* weewiki_export_d *ex; */
    /* FILE *fp; */
    /* size_t n; */
    /* ex = ud; */
    /* fp = ex->fp; */

    /* fprintf(fp, "<pre><code>"); */
    /* for (n = 0; n < sz; n++) { */
    /*     switch (str[n]) { */
    /*         default: */
    /*             fputc(str[n], fp); */
    /*             break; */
    /*     } */
    /* } */
    /* fprintf(fp, "</pre></code>\n"); */
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_codeblock(op, html_codeblock);
#+END_SRC
** TODO Name
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_name(void *ud,
                           const char *str,
                           size_t sz)
{
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_name(op, html_name);
#+END_SRC
** Title
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_title(void *ud,
                           const char *str,
                           size_t sz)
{
    wws_parser_d *p;
    p = ud;
    wws_buffer_write(p->buf, "<title>", 7);
    wws_buffer_write(p->buf, str, sz);
    wws_buffer_write(p->buf, "</title>", 8);
    wws_buffer_write(p->buf, "<h1>", 4);
    wws_buffer_write(p->buf, str, sz);
    wws_buffer_write(p->buf, "</h1>", 5);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_title(op, html_title);
#+END_SRC
** Link
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_link(void *ud,
                      const char *link,
                      size_t link_sz,
                      const char *name,
                      size_t name_sz)
{
    wws_parser_d *p;
    p = ud;
    wws_buffer_write(p->buf, "<a href=\"", 9);
    wws_buffer_write(p->buf, link, link_sz);
    wws_buffer_write(p->buf, "\">", 2);
    wws_buffer_write(p->buf, name, name_sz);
    wws_buffer_write(p->buf, "</a>", 4);
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_link(op, html_link);
#+END_SRC
** Paragraph
#+NAME: orgparse_callbacks
#+BEGIN_SRC c
static void html_pgrph(void *ud, int mode)
{
    wws_parser_d *p;
    p = ud;
    if (mode) {
        wws_buffer_write(p->buf, "</p>", 4);
    } else {
        wws_buffer_write(p->buf, "<p>", 3);
    }
}
#+END_SRC
#+NAME: orgparse_html_setup
#+BEGIN_SRC c
orgparse_set_pgrph(op, html_pgrph);
#+END_SRC
* DONE Buffer Management
CLOSED: [2020-01-14 Tue 15:17]
- State "DONE"       from "WIP"        [2020-01-14 Tue 15:17]
- State "WIP"        from "TODO"       [2020-01-12 Sun 17:41]
All content must be written to in-memory location.
This is handled in a very simple way via a buffer type
called =wws_buffer=.

#+NAME: typedefs
#+BEGIN_SRC c
typedef struct wws_buffer wws_buffer;
#+END_SRC

A =wws_buffer= struct contains the buffer itself (an
unsigned char array), the current position of the buffer
(which is therefore the current size), and the
total size.

#+NAME: structs
#+BEGIN_SRC c
struct wws_buffer {
    int pos;
    int size;
    unsigned char *buf;
};
#+END_SRC

The =wws_buffer= is allocated with the function
=wws_buffer_alloc=. Choose a largish size because this
is the maximum HTML size for a page. Re-allocation could
come later, but for this proof-of concept, a fixed
size is simple and good enough.

#+NAME: funcdefs
#+BEGIN_SRC c
void wws_buffer_alloc(wws_buffer *wb, int size);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void wws_buffer_alloc(wws_buffer *wb, int size)
{
    wb->buf = calloc(1, size);
    wb->pos = 0;
    wb->size = size;
}
#+END_SRC

A allocated buffer must be freed with =wws_buffer_free=.

#+NAME: funcdefs
#+BEGIN_SRC c
void wws_buffer_free(wws_buffer *wb);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void wws_buffer_free(wws_buffer *wb)
{
    wb->size = 0;
    wb->pos = 0;
    free(wb->buf);
}
#+END_SRC

Write to the buffer using =wws_buffer_write=.

#+NAME: funcdefs
#+BEGIN_SRC c
void wws_buffer_write(wws_buffer *wb,
                      const char *buf,
                      int size);
#+END_SRC

This copies over a chunk of data to the internal buffer.
If the buffer is full, it just stops adding and breaks
away.

#+NAME: functions
#+BEGIN_SRC c
void wws_buffer_write(wws_buffer *wb,
                      const char *buf,
                      int size)
{
    int i;
    if (wb->pos >= wb->size) return;
    for (i = 0; i < size; i++) {
        wb->buf[wb->pos] = buf[i];
        wb->pos++;
        if (wb->pos >= wb->size) break;
    }
}
#+END_SRC
* WIP Janet CallBacks
** DONE Org Parser Callback for Janet
CLOSED: [2020-01-15 Wed 15:40]
- State "DONE"       from "WIP"        [2020-01-15 Wed 15:40]
Callback to be used by Janet function.
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void parse_org(weewiki_d *w,
                      const char *str,
                      unsigned int sz);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void parse_org(weewiki_d *w,
                      const char *str,
                      unsigned int sz)
{
    orgparse_state_flags *f;
    orgparse_state *state;
    wws_parser_d *pd;

    pd = weewiki_ud(w);
    if (pd == NULL) return;
    state = calloc(1, orgparse_state_size());
    orgparse_state_init(state, pd->op, str, sz, pd);
    f = orgparse_state_flags_get(pd->state);
    orgparse_state_flags_set(state, f);
    orgparse_state_run(state);
    free(state);
}
#+END_SRC
** Print Callback for Janet
Anytime Janet calls print, this is what happens.
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void printer(weewiki_d *w,
                    const char *str,
                    unsigned int sz);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void printer(weewiki_d *w,
                    const char *str,
                    unsigned int sz)
{
    wws_parser_d *pd;
    pd = weewiki_ud(w);
    if (pd == NULL) return;
    wws_buffer_write(pd->buf, str, sz);
}
#+END_SRC
